// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskBoard;

#nullable disable

namespace TaskBoard.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("AccountGroupSnapchatAccountModel", b =>
                {
                    b.Property<long>("AccountsId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("GroupsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AccountsId", "GroupsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("AccountGroupSnapchatAccountModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProxyProxyGroup", b =>
                {
                    b.Property<long>("GroupsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProxiesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GroupsId", "ProxiesId");

                    b.HasIndex("ProxiesId");

                    b.ToTable("ProxyProxyGroup");
                });

            modelBuilder.Entity("TaskBoard.Models.AccountGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AccountGroups");
                });

            modelBuilder.Entity("TaskBoard.Models.AppSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AccessDeadline")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccountCooldown")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApiKey")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DefaultOs")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableBandwidthSaver")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableDebug")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableStealth")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableWebRegister")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FiveSimApiKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("KopeechkaApiKey")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxAddFriendsUsers")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxManagedAccounts")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MaxQuotaMb")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxRegisterAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxRetries")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxTasks")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NamsorApiKey")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ProxyChecking")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ProxyScraping")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SmsActivateApiKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("SmsPoolApiKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("TextVerifiedApiKey")
                        .HasColumnType("TEXT");

                    b.Property<int>("Threads")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Timeout")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TwilioApiKey")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("TaskBoard.Models.BannedAccountDeletionLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DeletionTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BannedAccountDeletionLog");
                });

            modelBuilder.Entity("TaskBoard.Models.BitmojiModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Body")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Bottom")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BottomTone1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BottomTone10")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BottomTone2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BottomTone3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BottomTone4")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BottomTone5")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BottomTone6")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BottomTone7")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BottomTone8")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BottomTone9")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Brow")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClothingType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Ear")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Eye")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Eyelash")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FaceProportion")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Footwear")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FootwearTone1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FootwearTone10")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FootwearTone2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FootwearTone3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FootwearTone4")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FootwearTone5")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FootwearTone6")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FootwearTone7")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FootwearTone8")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FootwearTone9")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Hair")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HairTone")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IsTucked")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Jaw")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Mouth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Nose")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Pupil")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PupilTone")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rotation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkinTone")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sock")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SockTone1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SockTone2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SockTone3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SockTone4")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Style")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Top")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TopTone1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TopTone10")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TopTone2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TopTone3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TopTone4")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TopTone5")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TopTone6")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TopTone7")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TopTone8")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TopTone9")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Bitmojis");
                });

            modelBuilder.Entity("TaskBoard.Models.ChosenAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("WorkId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("WorkId");

                    b.ToTable("ChosenAccounts");
                });

            modelBuilder.Entity("TaskBoard.Models.ChosenTarget", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("TargetUserId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("WorkId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TargetUserId");

                    b.HasIndex("WorkId");

                    b.ToTable("ChosenTargets");
                });

            modelBuilder.Entity("TaskBoard.Models.EmailListModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EmailList");
                });

            modelBuilder.Entity("TaskBoard.Models.EmailModel", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<long?>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFake")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.HasKey("Address");

                    b.HasIndex("AccountId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("TaskBoard.Models.EnabledModule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AppSettingsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ModuleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AppSettingsId");

                    b.ToTable("EnabledModules");
                });

            modelBuilder.Entity("TaskBoard.Models.Keyword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("TaskBoard.Models.LogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LogLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<long>("WorkId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WorkId");

                    b.ToTable("LogEntries");
                });

            modelBuilder.Entity("TaskBoard.Models.MacroModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Replacement")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Macros");
                });

            modelBuilder.Entity("TaskBoard.Models.MediaFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastAccess")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ServerPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("TaskBoard.Models.NameModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Names");
                });

            modelBuilder.Entity("TaskBoard.Models.PhoneListModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PhoneList");
                });

            modelBuilder.Entity("TaskBoard.Models.Proxy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("User")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Proxies");
                });

            modelBuilder.Entity("TaskBoard.Models.ProxyGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProxyType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ProxyGroups");
                });

            modelBuilder.Entity("TaskBoard.Models.SnapchatAccountModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccessToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountCountryCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("BusinessAccessToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DToken1I")
                        .HasColumnType("TEXT");

                    b.Property<string>("DToken1V")
                        .HasColumnType("TEXT");

                    b.Property<string>("Device")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceProfile")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmailValidated")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FriendCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Horoscope")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IncomingFriendCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Install")
                        .HasColumnType("TEXT");

                    b.Property<long>("InstallTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OS")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OutgoingFriendCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PhoneValidated")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProxyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SnapchatVersion")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimeZone")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("hasAdded")
                        .HasColumnType("INTEGER");

                    b.Property<string>("refreshToken")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProxyId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("TaskBoard.Models.TargetUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Added")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountryCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("Race")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Searched")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Used")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TargetUsers");
                });

            modelBuilder.Entity("TaskBoard.Models.UserNameModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserNames");
                });

            modelBuilder.Entity("TaskBoard.Models.WorkRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountsFail")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountsPass")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountsToUse")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActionsPerAccount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Arguments")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("ChainDelayMs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExportedFriends")
                        .HasColumnType("TEXT");

                    b.Property<string>("FailedAccounts")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FinishTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxFriends")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("MediaFileId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinFriends")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PreviousWorkRequestId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ScheduledTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MediaFileId");

                    b.HasIndex("PreviousWorkRequestId");

                    b.ToTable("WorkRequests");
                });

            modelBuilder.Entity("AccountGroupSnapchatAccountModel", b =>
                {
                    b.HasOne("TaskBoard.Models.SnapchatAccountModel", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskBoard.Models.AccountGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProxyProxyGroup", b =>
                {
                    b.HasOne("TaskBoard.Models.ProxyGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskBoard.Models.Proxy", null)
                        .WithMany()
                        .HasForeignKey("ProxiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskBoard.Models.ChosenAccount", b =>
                {
                    b.HasOne("TaskBoard.Models.SnapchatAccountModel", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskBoard.Models.WorkRequest", "Work")
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("TaskBoard.Models.ChosenTarget", b =>
                {
                    b.HasOne("TaskBoard.Models.TargetUser", "TargetUser")
                        .WithMany()
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskBoard.Models.WorkRequest", "Work")
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TargetUser");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("TaskBoard.Models.EmailModel", b =>
                {
                    b.HasOne("TaskBoard.Models.SnapchatAccountModel", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TaskBoard.Models.EnabledModule", b =>
                {
                    b.HasOne("TaskBoard.Models.AppSettings", null)
                        .WithMany("EnabledModules")
                        .HasForeignKey("AppSettingsId");
                });

            modelBuilder.Entity("TaskBoard.Models.LogEntry", b =>
                {
                    b.HasOne("TaskBoard.Models.WorkRequest", "Work")
                        .WithMany("Logs")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Work");
                });

            modelBuilder.Entity("TaskBoard.Models.SnapchatAccountModel", b =>
                {
                    b.HasOne("TaskBoard.Models.Proxy", "Proxy")
                        .WithMany("Accounts")
                        .HasForeignKey("ProxyId");

                    b.Navigation("Proxy");
                });

            modelBuilder.Entity("TaskBoard.Models.WorkRequest", b =>
                {
                    b.HasOne("TaskBoard.Models.MediaFile", "MediaFile")
                        .WithMany("WorkRequests")
                        .HasForeignKey("MediaFileId");

                    b.HasOne("TaskBoard.Models.WorkRequest", "PreviousWorkRequest")
                        .WithMany()
                        .HasForeignKey("PreviousWorkRequestId");

                    b.Navigation("MediaFile");

                    b.Navigation("PreviousWorkRequest");
                });

            modelBuilder.Entity("TaskBoard.Models.AppSettings", b =>
                {
                    b.Navigation("EnabledModules");
                });

            modelBuilder.Entity("TaskBoard.Models.MediaFile", b =>
                {
                    b.Navigation("WorkRequests");
                });

            modelBuilder.Entity("TaskBoard.Models.Proxy", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("TaskBoard.Models.WorkRequest", b =>
                {
                    b.Navigation("Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
